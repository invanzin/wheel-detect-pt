"""
Arquivo de teste para demonstrar os novos modelos de dados.
Execute este arquivo para ver os modelos funcionando.
"""
import sys
from pathlib import Path

# Adicionar o diret√≥rio src ao path para imports
sys.path.insert(0, str(Path(__file__).parent))

from core.models import Wheel, Axle, DetectionResult
from core.exceptions.detection_errors import ValidationError
import time

def test_wheel_creation():
    """Testa a cria√ß√£o de uma roda."""
    print("=== Testando cria√ß√£o de roda ===")
    
    try:
        # Criar roda v√°lida
        wheel = Wheel(
            center=(100, 200),
            bbox=(90, 190, 110, 210),
            confidence=0.85,
            wheel_type="dianteira"
        )
        print(f"‚úÖ Roda criada com sucesso: {wheel}")
        print(f"   √Årea: {wheel.area:.1f}")
        print(f"   Aspect ratio: {wheel.aspect_ratio:.2f}")
        
        # Testar propriedades
        corners = wheel.get_bbox_corners()
        print(f"   Cantos do bbox: {corners}")
        
        # Testar se ponto est√° dentro
        inside = wheel.is_point_inside((100, 200))
        print(f"   Ponto (100, 200) est√° dentro: {inside}")
        
        return wheel
        
    except Exception as e:
        print(f"‚ùå Erro ao criar roda: {e}")
        return None

def test_axle_creation(wheel1, wheel2):
    """Testa a cria√ß√£o de um eixo."""
    print("\n=== Testando cria√ß√£o de eixo ===")
    
    try:
        # Criar eixo com duas rodas
        axle = Axle(
            wheels=[wheel1, wheel2],
            position=(150, 200),
            confidence=0.80,
            axle_type="dianteiro"
        )
        print(f"‚úÖ Eixo criado com sucesso: {axle}")
        print(f"   N√∫mero de rodas: {axle.wheel_count}")
        print(f"   √â dual: {axle.is_dual}")
        print(f"   Est√° levantado: {axle.is_lifted}")
        print(f"   Confian√ßa total: {axle.total_confidence:.3f}")
        print(f"   Espa√ßamento: {axle.calculate_spacing():.1f}")
        
        return axle
        
    except Exception as e:
        print(f"‚ùå Erro ao criar eixo: {e}")
        return None

def test_detection_result(wheel1, wheel2, axle):
    """Testa a cria√ß√£o de um resultado de detec√ß√£o."""
    print("\n=== Testando resultado de detec√ß√£o ===")
    
    try:
        # Criar resultado
        result = DetectionResult(
            wheels=[wheel1, wheel2],
            axles=[axle],
            processing_time=2.5,
            model_version="v1.0"
        )
        
        print(f"‚úÖ Resultado criado com sucesso: {result}")
        print(f"   Total de rodas: {result.total_wheels}")
        print(f"   Total de eixos: {result.total_axles}")
        print(f"   Eixos levantados: {result.lifted_axles}")
        print(f"   Confian√ßa m√©dia: {result.average_confidence:.3f}")
        print(f"   Score de qualidade: {result.calculate_detection_quality_score():.3f}")
        
        # Testar m√©todos
        lifted_axles = result.get_lifted_axles()
        print(f"   Eixos levantados (m√©todo): {len(lifted_axles)}")
        
        high_conf_wheels = result.get_wheels_by_confidence(0.8)
        print(f"   Rodas com confian√ßa > 0.8: {len(high_conf_wheels)}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erro ao criar resultado: {e}")
        return None

def test_serialization(result):
    """Testa serializa√ß√£o e deserializa√ß√£o."""
    print("\n=== Testando serializa√ß√£o ===")
    
    try:
        # Converter para dicion√°rio
        result_dict = result.to_dict()
        print(f"‚úÖ Convers√£o para dicion√°rio: {len(result_dict)} campos")
        
        # Converter de volta para objeto
        result_recovered = DetectionResult.from_dict(result_dict)
        print(f"‚úÖ Recupera√ß√£o do dicion√°rio: {result_recovered}")
        
        # Verificar se s√£o iguais
        if (result.detection_id == result_recovered.detection_id and
            result.total_wheels == result_recovered.total_wheels):
            print("‚úÖ Serializa√ß√£o/deserializa√ß√£o funcionou corretamente!")
        else:
            print("‚ùå Problema na serializa√ß√£o/deserializa√ß√£o")
            
    except Exception as e:
        print(f"‚ùå Erro na serializa√ß√£o: {e}")

def test_validation_errors():
    """Testa valida√ß√µes de erro."""
    print("\n=== Testando valida√ß√µes de erro ===")
    
    try:
        # Tentar criar roda com bbox inv√°lido
        Wheel(
            center=(100, 200),
            bbox=(110, 210, 90, 190),  # x1 > x2, y1 > y2
            confidence=0.85
        )
        print("‚ùå Deveria ter falhado com bbox inv√°lido")
        
    except ValidationError as e:
        print(f"‚úÖ Valida√ß√£o funcionou: {e}")
    
    try:
        # Tentar criar roda com confian√ßa inv√°lida
        Wheel(
            center=(100, 200),
            bbox=(90, 190, 110, 210),
            confidence=1.5  # > 1.0
        )
        print("‚ùå Deveria ter falhado com confian√ßa inv√°lida")
        
    except ValidationError as e:
        print(f"‚úÖ Valida√ß√£o funcionou: {e}")

def main():
    """Fun√ß√£o principal de teste."""
    print("üöó Testando modelos de dados do sistema de detec√ß√£o de rodas")
    print("=" * 60)
    
    # Testar cria√ß√£o de rodas
    wheel1 = test_wheel_creation()
    if not wheel1:
        return
    
    # Criar segunda roda
    wheel2 = Wheel(
        center=(200, 200),
        bbox=(190, 190, 210, 210),
        confidence=0.90,
        wheel_type="dianteira"
    )
    
    # Testar cria√ß√£o de eixo
    axle = test_axle_creation(wheel1, wheel2)
    if not axle:
        return
    
    # Testar resultado de detec√ß√£o
    result = test_detection_result(wheel1, wheel2, axle)
    if not result:
        return
    
    # Testar serializa√ß√£o
    test_serialization(result)
    
    # Testar valida√ß√µes de erro
    test_validation_errors()
    
    print("\n" + "=" * 60)
    print("üéâ Todos os testes conclu√≠dos com sucesso!")
    print("Os modelos est√£o funcionando corretamente.")

if __name__ == "__main__":
    main()
